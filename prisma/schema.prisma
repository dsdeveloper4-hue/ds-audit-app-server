generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
  ENUMS
*/
enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum AuditStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  READ
}

/*
  USERS
*/
model User {
  id             String                 @id @default(uuid())
  name           String
  mobile         String                 @unique
  password       String
  role           Role                   @default(USER)
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt

  // Many-to-many relation with audits
  audits         Audit[]                @relation("AuditParticipants")

  // Linked user actions in RecentActivityHistory
  activities     RecentActivityHistory[]
  
  // Asset purchases added by this user
  assetPurchases AssetPurchase[]
}

/*
  ROOMS & ITEMS
*/
model Room {
  id             String                 @id @default(uuid())
  name           String
  floor          String?
  department     String?
  itemDetails    ItemDetails[]
  assetPurchases AssetPurchase[]
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt

  @@index([name])
}

model Item {
  id             String                 @id @default(uuid())
  name           String
  category       String?
  unit           String?
  unit_price     Decimal?               @db.Decimal(10, 2)
  itemDetails    ItemDetails[]
  assetPurchases AssetPurchase[]
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt

  @@index([name])
  @@index([category])
}

/*
  AUDITS
*/
model Audit {
  id            String                  @id @default(uuid())
  month         Int
  year          Int
  status        AuditStatus             @default(IN_PROGRESS)
  notes         String?
  itemDetails   ItemDetails[]

  // Participants: many-to-many with User
  participants  User[]                  @relation("AuditParticipants")

  created_at    DateTime                @default(now())
  updated_at    DateTime                @updatedAt

  @@unique([month, year])
}

/*
  ITEM DETAILS (junction table)
*/
model ItemDetails {
  id                String              @id @default(uuid())
  room_id           String
  item_id           String
  audit_id          String
  active_quantity   Int                 @default(0)
  broken_quantity   Int                 @default(0)
  inactive_quantity Int                 @default(0)
  unit_price        Decimal?            @db.Decimal(10, 2)
  total_price       Decimal?            @db.Decimal(10, 2)

  room    Room                           @relation(fields: [room_id], references: [id], onDelete: Cascade)
  item    Item                           @relation(fields: [item_id], references: [id], onDelete: Cascade)
  audit   Audit                          @relation(fields: [audit_id], references: [id], onDelete: Cascade)

  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt

  @@unique([room_id, item_id, audit_id])
  @@index([room_id])
  @@index([item_id])
  @@index([audit_id])
}

/*
  ASSET PURCHASES
*/
model AssetPurchase {
  id              String      @id @default(uuid())
  
  // Asset details
  room_id         String
  item_id         String
  quantity        Int
  unit_price      Decimal     @db.Decimal(10, 2)
  total_cost      Decimal     @db.Decimal(10, 2)
  
  // Purchase info
  purchase_date   DateTime    @default(now())
  notes           String?
  
  // Who added this
  added_by        String?
  user            User?       @relation(fields: [added_by], references: [id], onDelete: SetNull)
  
  // Relations
  room            Room        @relation(fields: [room_id], references: [id], onDelete: Cascade)
  item            Item        @relation(fields: [item_id], references: [id], onDelete: Cascade)
  
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@index([room_id])
  @@index([item_id])
  @@index([purchase_date])
  @@index([added_by])
}

/*
  RECENT ACTIVITY HISTORY
*/
model RecentActivityHistory {
  id              String      @id @default(uuid())

  // WHO did the action
  user_id         String?
  user            User?       @relation(fields: [user_id], references: [id], onDelete: SetNull)

  // WHEN it happened
  occurred_at     DateTime    @default(now())

  // WHAT kind of entity was affected (Room, Item, ItemDetails, Audit, etc.)
  entity_type     String      // e.g. "Room", "Item", "ItemDetails", "Audit", "User"

  // Human-friendly name for UI (optional)
  entity_name     String?     // e.g. "Fan - Office 3"

  // WHICH specific entity record
  entity_id       String?

  // WHAT ACTION happened
  action_type     ActivityType

  // Full before / after snapshots
  before          Json?       // null for CREATE
  after           Json?       // null for DELETE

  // Compact diff summary
  change_summary  Json?

  // Short description for UI
  description     String?

  // Request/metadata info
  metadata        Json?

  created_at      DateTime    @default(now())

  @@index([entity_type, entity_id])
  @@index([user_id, occurred_at])
  @@index([occurred_at])
}
